Fact <- function(n) if (n==1) 1 else n * Fact(n-1)
Fact(5)
datos <- c("Vainilla", "Fresa","Vainilla", "Fresa", "Chocolate", "Vainilla", "Cafe", "Vainilla", "Fresa", "Chocolate", "Turron", "Menta", "Menta", "Menta")
table(datos)
N <- length(datos)
n <- table(datos)
sum(n)
f <- n/N
f100 <- round(100*f.2)
f100 <- round(100*f,2)
sum(f100)
barplot(n, col='blue')
datos <- c(40, 45,33,44,56,31,30,33,53,52,59,41)
table(datos)
n <- table(datos)
cumsum(n)
barplot(n, main="Histograma de tiempos"
space=0.5
barplot(n, main="Histograma de tiempos",
space=0.5,
xlab = "Tiempos llegada",
ylab= "Frecuencia absoluta",
color="green",
border = "blue")
1 + 1
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
library(readr)
to_csv_out <- read_csv("Downloads/to_csv_out.csv")
View(to_csv_out)
library(ggplot2)
# Datos: puedes importar el dataset aquí en R si fuese necesario
datos <- data.frame(
Athlete = c("Halil Mutlu", "Wu Wenxiong", "Zhang Xiangxiang", "Wang Shin-yuan", "Sergio Álvarez"),
Snatch = c(137.5, 125.0, 125.0, 125.0, 120.0),
Clean_Jerk = c(167.5, 162.5, 162.5, 160.0, 155.0)
)
# Convertir los datos a formato largo (long format)
datos_largo <- tidyr::gather(datos, key = "Lift_Type", value = "Weight", Snatch, Clean_Jerk)
# Crear gráfico de barras apiladas
ggplot(datos_largo, aes(fill = Lift_Type, y = Weight, x = Athlete)) +
geom_bar(position = "fill", stat = "identity") +
labs(
title = "Proporción de Snatch y Clean & Jerk por Atleta",
x = "Atleta",
y = "Proporción de Peso Levantado"
) +
scale_y_continuous(labels = scales::percent) +
theme_minimal()
df_games_and_open_with_2023 <- read.csv("~/Movies/MasterBigdata/VisualizaciónData/df_games_and_open_with_2023.csv")
View(df_games_and_open_with_2023)
View(df_games_and_open_with_2023)
install.packages("dplyr")
library(dplyr)
View(df_games_and_open_with_2023)
data = df_games_and_open_with_2023
data_sin_duplicados <- distinct(data)
View(data)
View(data_sin_duplicados)
data = df_games_and_open_with_2023
print(nrow(data))
print(nrow(data_sin_duplicados))
data = df_games_and_open_with_2023
data_sin_duplicados <- data[!duplicated(data$competitorId), ]
print(nrow(data))
print(nrow(data_sin_duplicados))
View(data_sin_duplicados)
write.csv(data_sin_duplicados, "crosfit2023_no_duplicates", row.names = FALSE)
write.csv(data_sin_duplicados, "crosfit2023_no_duplicates.csv", row.names = FALSE)
1 + 1
library(treemap)
library(ggplot2)
install.packages("treemap")
install.packages("treemap")
library(treemap)
data <- data.frame(
category = c("A", "B", "C", "D"),
value = c(10, 20, 15, 30)
)
treemap(data,
index = "category",
vSize = "value",
title = "Simple Treemap Example"
)
#install.packages("treemap")
library(treemap)
data <- data.frame(
category = c("A", "B", "C", "D"),
value = c(10, 20, 15, 30)
)
treemap(data,
index = "category",
vSize = "value",
title = "Representantes "
)
# Cargar el dataset
data <- read_csv("/Users/zuldare/Movies/MasterBigdata/VisualizaciónData/crosfit2023_no_duplicates.csv")
1 + 1
#| echo: false
2 * 2
reticulate::repl_python()
library(ggplot2)
# Datos: puedes importar el dataset aquí en R si fuese necesario
datos <- data.frame(
Athlete = c("Halil Mutlu", "Wu Wenxiong", "Zhang Xiangxiang", "Wang Shin-yuan", "Sergio Álvarez"),
Snatch = c(137.5, 125.0, 125.0, 125.0, 120.0),
Clean_Jerk = c(167.5, 162.5, 162.5, 160.0, 155.0)
)
# Convertir los datos a formato largo (long format)
datos_largo <- tidyr::gather(datos, key = "Lift_Type", value = "Weight", Snatch, Clean_Jerk)
# Crear gráfico de barras apiladas
ggplot(datos_largo, aes(fill = Lift_Type, y = Weight, x = Athlete)) +
geom_bar(position = "fill", stat = "identity") +
labs(
title = "Proporción de Snatch y Clean & Jerk por Atleta",
x = "Atleta",
y = "Proporción de Peso Levantado"
) +
scale_y_continuous(labels = scales::percent) +
theme_minimal()
# Instalar las librerías necesarias si no están instaladas
if (!require(treemap)) install.packages("treemap")
if (!require(readr)) install.packages("readr")
# Cargar el dataset
data <- read_csv("Users/zuldare/Movies/MasterBigdata/VisualizaciónData/crosfit2023_no_duplicates.csv")
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
data <- data.frame(
category = c("A", "B", "C", "D"),
value = c(10, 20, 15, 30)
)
treemap(data,
index = "category",
vSize = "value",
title = "Representantes "
)
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
# Crear el treemap multinivel
treemap(data,
index = c("gender", "regionName", "countryOfOriginCode"), # Niveles: Género, Región, País de origen
vSize = "overallScore", # Usamos la columna de puntaje total como tamaño
title = "Treemap Multinivel de Competidores de CrossFit",
vColor = "gender", # Color basado en el género
type = "categorical",
palette = c("blue", "pink"), # Colores para masculino y femenino
fontsize.labels = c(15, 12, 10), # Tamaño de las etiquetas por nivel
fontcolor.labels = "white", # Color de las etiquetas
border.col = "white", # Color de los bordes
align.labels = list(c("center", "center"))) # Alineación de etiquetas
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
# Crear el treemap multinivel
treemap(data,
index = c("gender", "regionName", "countryOfOriginCode"), # Niveles: Género, Región, País de origen
vSize = "overallScore", # Usamos la columna de puntaje total como tamaño
title = "Treemap Multinivel de Competidores de CrossFit",
vColor = "gender", # Color basado en el género
type = "categorical",
palette = c("#9ac64a", "#764ac6"), # Colores para masculino y femenino
fontsize.labels = c(15, 12, 10), # Tamaño de las etiquetas por nivel
#fontcolor.labels = "white", # Color de las etiquetas
#border.col = "black", # Color de los bordes
align.labels = list(c("center", "center"))) # Alineación de etiquetas
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
# Crear el treemap multinivel
treemap(data,
index = c("gender", "regionName"),
vSize = "overallScore", # Usamos la columna de puntaje total como tamaño
title = "Treemap Multinivel de Competidores de CrossFit",
vColor = "gender", # Color basado en el género
type = "categorical",
palette = c("#9ac64a", "#764ac6"), # Colores para masculino y femenino
fontsize.labels = c(15, 12), # Tamaño de las etiquetas por nivel
#fontcolor.labels = "white", # Color de las etiquetas
#border.col = "black", # Color de los bordes
align.labels = list(c("center", "center"))) # Alineación de etiquetas
# Crear el treemap multinivel
treemap(data,
index = c("gender", "regionName"),
vSize = "count", # Usamos la columna de puntaje total como tamaño
title = "Treemap Multinivel de Competidores de CrossFit",
vColor = "gender", # Color basado en el género
type = "categorical",
palette = c("#9ac64a", "#764ac6"), # Colores para masculino y femenino
fontsize.labels = c(15, 12), # Tamaño de las etiquetas por nivel
#fontcolor.labels = "white", # Color de las etiquetas
#border.col = "black", # Color de los bordes
align.labels = list(c("center", "center"))) # Alineación de etiquetas
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
# Crear el treemap multinivel
treemap(data,
index = c("gender", "regionName"),
vSize = "count", # Usamos la columna de puntaje total como tamaño
title = "Treemap Multinivel de Competidores de CrossFit",
vColor = "gender", # Color basado en el género
type = "categorical",
palette = c("#9ac64a", "#764ac6"), # Colores para masculino y femenino
fontsize.labels = c(15, 12), # Tamaño de las etiquetas por nivel
#fontcolor.labels = "white", # Color de las etiquetas
#border.col = "black", # Color de los bordes
align.labels = list(c("center", "center"))) # Alineación de etiquetas
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
dataClean <- data
# Crear el treemap multinivel
treemap(dataClean,
index = c("gender", "regionName"),
vSize = "count", # Usamos la columna de puntaje total como tamaño
title = "Treemap Multinivel de Competidores de CrossFit",
vColor = "gender", # Color basado en el género
type = "categorical",
palette = c("#9ac64a", "#764ac6"), # Colores para masculino y femenino
fontsize.labels = c(15, 12), # Tamaño de las etiquetas por nivel
#fontcolor.labels = "white",
#border.col = "black", # Color de los bordes
align.labels = list(c("center", "center")))
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
dataClean <- data
# Crear el treemap multinivel
treemap(dataClean,
index = c("gender", "regionName"),
vSize = "overallScore", # Usamos la columna de puntaje total como tamaño
title = "Treemap Multinivel de Competidores de CrossFit",
vColor = "gender", # Color basado en el género
type = "categorical",
palette = c("#9ac64a", "#764ac6"), # Colores para masculino y femenino
fontsize.labels = c(15, 12), # Tamaño de las etiquetas por nivel
#fontcolor.labels = "white",
#border.col = "black", # Color de los bordes
align.labels = list(c("center", "center")))
# Instalar las librerías necesarias si no están instaladas
if (!require(treemap)) install.packages("treemap")
if (!require(readr)) install.packages("readr")
if (!require(dplyr)) install.packages("dplyr")
library(treemap)
library(readr)
library(dplyr)
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
dataClean <- data
# Crear el treemap multinivel
treemap(dataClean,
index = c("gender", "regionName"),
vSize = "overallScore", # Usamos la columna de puntaje total como tamaño
title = "Treemap Multinivel de Competidores de CrossFit",
vColor = "gender", # Color basado en el género
type = "categorical",
palette = c("#9ac64a", "#764ac6"), # Colores para masculino y femenino
fontsize.labels = c(15, 12), # Tamaño de las etiquetas por nivel
#fontcolor.labels = "white",
#border.col = "black", # Color de los bordes
align.labels = list(c("center", "center")))
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
dataClean <- data
# Cambiar los valores de la columna 'gender' a "Male" y "Female"
dataClean <- dataClean %>%
mutate(gender = ifelse(gender == "M", "Male", "Female"))
# Reemplazar los valores "N/A" de la columna 'regionName' por "To be selected"
dataClean <- dataClean %>%
mutate(regionName = ifelse(regionName == "N/A", "To be selected", regionName))
# Crear una nueva tabla que cuente el número de competidores por género y región
data_summary <- dataClean %>%
group_by(gender, regionName) %>%
summarise(count = n())  # Contar competidores
# Crear el treemap multinivel
treemap(data_summary,
index = c("gender", "regionName"),
vSize = "overallScore", # Usamos la columna de puntaje total como tamaño
title = "Crossfit competitors gender-region multilevel treemap",
vColor = "gender",
type = "categorical",
palette = c("#9ac64a", "#764ac6"),
fontsize.labels = c(15, 12),
align.labels = list(c("center", "center")))
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
dataClean <- data
# Cambiar los valores de la columna 'gender' a "Male" y "Female"
dataClean <- dataClean %>%
mutate(gender = ifelse(gender == "M", "Male", "Female"))
# Reemplazar los valores "N/A" de la columna 'regionName' por "To be selected"
dataClean <- dataClean %>%
mutate(regionName = ifelse(regionName == "N/A", "To be selected", regionName))
# Crear una nueva tabla que cuente el número de competidores por género y región
data_summary <- dataClean %>%
group_by(gender, regionName) %>%
summarise(count = n())  # Contar competidores
# Crear el treemap multinivel
treemap(data_summary,
index = c("gender", "regionName"),
vSize = "count",
title = "Crossfit competitors gender-region multilevel treemap",
vColor = "gender",
type = "categorical",
palette = c("#9ac64a", "#764ac6"),
fontsize.labels = c(15, 12),
align.labels = list(c("center", "center")))
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
dataClean <- data
# Cambiar los valores de la columna 'gender' a "Male" y "Female"
dataClean <- dataClean %>%
mutate(gender = ifelse(gender == "M", "Male", "Female"))
# Reemplazar los valores "N/A" de la columna 'regionName' por "To be selected"
dataClean <- dataClean %>%
mutate(regionName = ifelse(regionName == "N/A", "To be selected", regionName))
# Crear una nueva tabla que cuente el número de competidores por género y región
data_summary <- dataClean %>%
group_by(gender, regionName) %>%
summarise(count = n())  # Contar competidores
# Crear el treemap multinivel
treemap(data_summary,
index = c("gender", "regionName"),
vSize = "count",
title = "Crossfit competitors gender-region multilevel treemap",
vColor = "gender",
type = "categorical",
palette = c("#9ac64a", "#764ac6"),
fontsize.labels = c(15, 12),
align.labels = list(c("top", "center")))
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
dataClean <- data
# Cambiar los valores de la columna 'gender' a "Male" y "Female"
dataClean <- dataClean %>%
mutate(gender = ifelse(gender == "M", "Male", "Female"))
# Reemplazar los valores "N/A" de la columna 'regionName' por "To be selected"
dataClean <- dataClean %>%
mutate(regionName = ifelse(regionName == "NA", "To be selected", regionName))
# Crear una nueva tabla que cuente el número de competidores por género y región
data_summary <- dataClean %>%
group_by(gender, regionName) %>%
summarise(count = n())  # Contar competidores
# Crear el treemap multinivel
treemap(data_summary,
index = c("gender", "regionName"),
vSize = "count",
title = "Crossfit competitors gender-region multilevel treemap",
vColor = "gender",
type = "categorical",
palette = c("#9ac64a", "#764ac6"),
fontsize.labels = c(15, 12),
align.labels = list(c("center", "center")))
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
dataClean <- data
# Cambiar los valores de la columna 'gender' a "Male" y "Female"
dataClean <- dataClean %>%
mutate(gender = ifelse(gender == "M", "Male", "Female"))
# Reemplazar los valores "N/A" de la columna 'regionName' por "To be selected"
dataClean <- dataClean %>%
mutate(regionName = ifelse(regionName == "", "To be selected", regionName))
# Crear una nueva tabla que cuente el número de competidores por género y región
data_summary <- dataClean %>%
group_by(gender, regionName) %>%
summarise(count = n())  # Contar competidores
# Crear el treemap multinivel
treemap(data_summary,
index = c("gender", "regionName"),
vSize = "count",
title = "Crossfit competitors gender-region multilevel treemap",
vColor = "gender",
type = "categorical",
palette = c("#9ac64a", "#764ac6"),
fontsize.labels = c(15, 12),
align.labels = list(c("center", "center")))
#| echo: false
# Instalar las librerías necesarias si no están instaladas
if (!require(treemap)) install.packages("treemap")
if (!require(readr)) install.packages("readr")
if (!require(dplyr)) install.packages("dplyr")
library(treemap)
library(readr)
library(dplyr)
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
dataClean <- data
# Cambiar los valores de la columna 'gender' a "Male" y "Female"
dataClean <- dataClean %>%
mutate(gender = ifelse(gender == "M", "Male", "Female"))
# Reemplazar los valores "N/A" de la columna 'regionName' por "To be selected"
dataClean <- dataClean %>%
mutate(regionName = ifelse(is.na(regionName) | regionName == "" | regionName == "N/A",
"To be selected",
regionName))
# Crear una nueva tabla que cuente el número de competidores por género y región
data_summary <- dataClean %>%
group_by(gender, regionName) %>%
summarise(count = n())  # Contar competidores
# Crear el treemap multinivel
treemap(data_summary,
index = c("gender", "regionName"),
vSize = "count",
title = "Crossfit competitors gender-region multilevel treemap",
vColor = "gender",
type = "categorical",
palette = c("#9ac64a", "#764ac6"),
fontsize.labels = c(15, 12),
align.labels = list(c("center", "center")))
#| echo: false
# Instalar las librerías necesarias si no están instaladas
if (!require(treemap)) install.packages("treemap")
if (!require(readr)) install.packages("readr")
if (!require(dplyr)) install.packages("dplyr")
library(treemap)
library(readr)
library(dplyr)
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
dataClean <- data
# Cambiar los valores de la columna 'gender' a "Male" y "Female"
dataClean <- dataClean %>%
mutate(gender = ifelse(gender == "M", "Male", "Female"))
# Reemplazar los valores "N/A" de la columna 'regionName' por "To be selected"
dataClean <- dataClean %>%
mutate(regionName = ifelse(is.na(regionName) | regionName == "" | regionName == "N/A",
"To be selected",
regionName))
# Crear una nueva tabla que cuente el número de competidores por género y región
data_summary <- dataClean %>%
group_by(gender, regionName) %>%
summarise(count = n())  # Contar competidores
# Crear una columna de etiquetas que incluya la región, género y el número de competidores
data_summary <- data_summary %>%
mutate(label = paste(regionName, "\n", gender, "\n", "Participantes:", count))
# Crear el treemap multinivel
treemap(data_summary,
index = c("gender", "regionName"),
vSize = "count",
title = "Crossfit competitors gender-region multilevel treemap",
vColor = "gender",
type = "categorical",
palette = c("#9ac64a", "#764ac6"),
fontsize.labels = c(15, 12),
align.labels = list(c("center", "center")))
#| echo: false
# Instalar las librerías necesarias si no están instaladas
if (!require(treemap)) install.packages("treemap")
if (!require(readr)) install.packages("readr")
if (!require(dplyr)) install.packages("dplyr")
library(treemap)
library(readr)
library(dplyr)
# Cargar el dataset
data <- read_csv("crosfit2023_no_duplicates.csv")
dataClean <- data
# Cambiar los valores de la columna 'gender' a "Male" y "Female"
dataClean <- dataClean %>%
mutate(gender = ifelse(gender == "M", "Male", "Female"))
# Reemplazar los valores "N/A" de la columna 'regionName' por "To be selected"
dataClean <- dataClean %>%
mutate(regionName = ifelse(is.na(regionName) | regionName == "" | regionName == "N/A",
"To be selected",
regionName))
# Crear una nueva tabla que cuente el número de competidores por género y región
data_summary <- dataClean %>%
group_by(gender, regionName) %>%
summarise(count = n())  # Contar competidores
# Crear una columna de etiquetas que incluya la región, género y el número de competidores
data_summary <- data_summary %>%
mutate(label = paste(regionName, "\n", gender, "\n", "Competitors:", count))
# Crear el treemap multinivel
treemap(data_summary,
# index = c("gender", "regionName"),
index = c("label"),
vSize = "count",
title = "Crossfit competitors gender-region multilevel treemap",
vColor = "gender",
type = "categorical",
palette = c("#9ac64a", "#764ac6"),
fontsize.labels = c(15, 12),
align.labels = list(c("center", "center")))
# Crear el treemap multinivel
treemap(data_summary,
index = c("gender", "regionName"),
# index = c("label"),
vSize = "count",
title = "Crossfit competitors gender-region multilevel treemap",
vColor = "gender",
type = "categorical",
palette = c("#9ac64a", "#764ac6"),
fontsize.labels = c(15, 12),
align.labels = list(c("center", "center")))
#| echo: false
2 * 2
reticulate::repl_python()
